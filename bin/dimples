#!/usr/bin/env ruby

require 'dimples'
require 'dimples/version'
require 'trollop'

trap('SIGINT') do
  puts "Generation cancelled!"
  exit!
end

valid_commands = %w[build]

options = Trollop::options do
  version "dimples v#{Dimples::VERSION}"
  banner <<EOS
A very, very simple static site generator.

Usage:
  dimples <#{valid_commands.join('|')}> [options]

Options:
EOS
  opt :config, "Config file path", type: :string
  opt :lib, "Library file path", default: 'lib'
  opt :verbose, "Verbose mode", default: false
end

Trollop::educate if ARGV.empty?
command = ARGV[0]

unless valid_commands.include?(command)
  Trollop::die "Command must be '#{valid_commands.join('\', \'')}'"
end

lib_path = File.join(Dir.pwd, options[:lib])
config_path = File.join(Dir.pwd, options[:config] || 'config', 'site.yml')

if File.exist?(config_path)
  begin
    config_hash = YAML.load_file(config_path)
  rescue
    Trollop::die "Invalid or malformed YAML config file"
  end
else
  Trollop::die "Unable to find config file" if options[:config]
  config_hash = {}
end

config_hash['verbose_logging'] = true if options[:verbose]
config = Dimples::Configuration.new(config_hash)

if Dir.exist?(lib_path)
  Dir.glob(File.join(lib_path, '**', '*')) do |path|
    require path
  end
end

site_klass = config.class_override(:site) || Dimples::Site
site = site_klass.new(config)

case command.to_sym
when :build
  Dimples.logger.info("Building site at #{site.output_paths[:site]}...")

  result = Benchmark.measure do
    site.generate
  end

  generation_time = result.real.round(2)

  message = "\033[92mDone!\033[0m Site built in #{generation_time} second"
  message += 's' if generation_time != 1
  message += '.'

  Dimples.logger.info(message)
end